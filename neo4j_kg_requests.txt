// 🔍 Voir tous les nœuds (avec limite pour ne pas tout afficher)
MATCH (n) RETURN n LIMIT 400;

// 🔍 Voir tous les types de relations
MATCH ()-[r]->() RETURN DISTINCT type(r);

// 🔍 Compter les nœuds par label
MATCH (n) RETURN labels(n)[0] AS label, count(*) AS count ORDER BY count DESC;

// 🔍 Voir tous les dictionnaires
MATCH (d:Dictionary) RETURN d.name LIMIT 50;

// 🔍 Voir tous les Enum (types BNK, TER, etc.)
MATCH (e:Enum) RETURN e.name LIMIT 50;

// 🔍 Voir tous les EnumValue (BNK_xxx, TER_xxx…)
MATCH (e:EnumValue) RETURN e.name LIMIT 50;

// 🔍 Trouver tous les BNK_*
MATCH (n:EnumValue) WHERE n.name STARTS WITH 'BNK_' RETURN n.name, n.description;

// 🔍 Trouver tous les TER_*
MATCH (n:EnumValue) WHERE n.name STARTS WITH 'TER_' RETURN n.name, n.description;

// 🔍 Représentation d’un dictionnaire + valeurs associées
MATCH (d:Dictionary {name: "PtracReactionDict"})<-[:BELONGS_TO_DICT]-(v)
RETURN d, v LIMIT 50;

// 🔍 Représentation d’un Enum + ses valeurs
MATCH (e:Enum {name: "BNK"})<-[:BELONGS_TO_ENUM]-(v:EnumValue)
RETURN e, v LIMIT 50;

// 🔍 Représentation d’une Classe + ses méthodes et attributs
MATCH (c:Class {name: "Ptrac"}) 
OPTIONAL MATCH (c)<-[:IS_METHOD_OF]-(m:Method)
OPTIONAL MATCH (c)<-[:IS_ATTRIBUTE_OF]-(a:Attribute)
RETURN c, m, a;

// 🔍 Trouver une entité précise par nom
MATCH (n) WHERE n.name = "TER_155" RETURN n;

// 🔍 Afficher description + relations de TER_155
MATCH (n {name: "TER_155"})-[r]-(m) RETURN n, r, m;

// 🔍 Tous les nœuds connectés à une classe
MATCH (c:Class)-[r]-(x) RETURN c, r, x LIMIT 100;

// 🔍 Supprimer tous les nœuds (⚠️ attention !)
MATCH (n) DETACH DELETE n;
