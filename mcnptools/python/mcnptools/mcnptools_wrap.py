# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _mcnptools_wrap
else:
    import _mcnptools_wrap

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mcnptools_wrap.delete_SwigPyIterator

    def value(self):
        return _mcnptools_wrap.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _mcnptools_wrap.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _mcnptools_wrap.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _mcnptools_wrap.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _mcnptools_wrap.SwigPyIterator_equal(self, x)

    def copy(self):
        return _mcnptools_wrap.SwigPyIterator_copy(self)

    def next(self):
        return _mcnptools_wrap.SwigPyIterator_next(self)

    def __next__(self):
        return _mcnptools_wrap.SwigPyIterator___next__(self)

    def previous(self):
        return _mcnptools_wrap.SwigPyIterator_previous(self)

    def advance(self, n):
        return _mcnptools_wrap.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _mcnptools_wrap.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _mcnptools_wrap.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _mcnptools_wrap.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _mcnptools_wrap.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _mcnptools_wrap.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _mcnptools_wrap.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _mcnptools_wrap:
_mcnptools_wrap.SwigPyIterator_swigregister(SwigPyIterator)

class vector_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _mcnptools_wrap.vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mcnptools_wrap.vector_int___nonzero__(self)

    def __bool__(self):
        return _mcnptools_wrap.vector_int___bool__(self)

    def __len__(self):
        return _mcnptools_wrap.vector_int___len__(self)

    def __getslice__(self, i, j):
        return _mcnptools_wrap.vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mcnptools_wrap.vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mcnptools_wrap.vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mcnptools_wrap.vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mcnptools_wrap.vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mcnptools_wrap.vector_int___setitem__(self, *args)

    def pop(self):
        return _mcnptools_wrap.vector_int_pop(self)

    def append(self, x):
        return _mcnptools_wrap.vector_int_append(self, x)

    def empty(self):
        return _mcnptools_wrap.vector_int_empty(self)

    def size(self):
        return _mcnptools_wrap.vector_int_size(self)

    def swap(self, v):
        return _mcnptools_wrap.vector_int_swap(self, v)

    def begin(self):
        return _mcnptools_wrap.vector_int_begin(self)

    def end(self):
        return _mcnptools_wrap.vector_int_end(self)

    def rbegin(self):
        return _mcnptools_wrap.vector_int_rbegin(self)

    def rend(self):
        return _mcnptools_wrap.vector_int_rend(self)

    def clear(self):
        return _mcnptools_wrap.vector_int_clear(self)

    def get_allocator(self):
        return _mcnptools_wrap.vector_int_get_allocator(self)

    def pop_back(self):
        return _mcnptools_wrap.vector_int_pop_back(self)

    def erase(self, *args):
        return _mcnptools_wrap.vector_int_erase(self, *args)

    def __init__(self, *args):
        _mcnptools_wrap.vector_int_swiginit(self, _mcnptools_wrap.new_vector_int(*args))

    def push_back(self, x):
        return _mcnptools_wrap.vector_int_push_back(self, x)

    def front(self):
        return _mcnptools_wrap.vector_int_front(self)

    def back(self):
        return _mcnptools_wrap.vector_int_back(self)

    def assign(self, n, x):
        return _mcnptools_wrap.vector_int_assign(self, n, x)

    def resize(self, *args):
        return _mcnptools_wrap.vector_int_resize(self, *args)

    def insert(self, *args):
        return _mcnptools_wrap.vector_int_insert(self, *args)

    def reserve(self, n):
        return _mcnptools_wrap.vector_int_reserve(self, n)

    def capacity(self):
        return _mcnptools_wrap.vector_int_capacity(self)
    __swig_destroy__ = _mcnptools_wrap.delete_vector_int

# Register vector_int in _mcnptools_wrap:
_mcnptools_wrap.vector_int_swigregister(vector_int)

class vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _mcnptools_wrap.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mcnptools_wrap.vector_double___nonzero__(self)

    def __bool__(self):
        return _mcnptools_wrap.vector_double___bool__(self)

    def __len__(self):
        return _mcnptools_wrap.vector_double___len__(self)

    def __getslice__(self, i, j):
        return _mcnptools_wrap.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mcnptools_wrap.vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mcnptools_wrap.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mcnptools_wrap.vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mcnptools_wrap.vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mcnptools_wrap.vector_double___setitem__(self, *args)

    def pop(self):
        return _mcnptools_wrap.vector_double_pop(self)

    def append(self, x):
        return _mcnptools_wrap.vector_double_append(self, x)

    def empty(self):
        return _mcnptools_wrap.vector_double_empty(self)

    def size(self):
        return _mcnptools_wrap.vector_double_size(self)

    def swap(self, v):
        return _mcnptools_wrap.vector_double_swap(self, v)

    def begin(self):
        return _mcnptools_wrap.vector_double_begin(self)

    def end(self):
        return _mcnptools_wrap.vector_double_end(self)

    def rbegin(self):
        return _mcnptools_wrap.vector_double_rbegin(self)

    def rend(self):
        return _mcnptools_wrap.vector_double_rend(self)

    def clear(self):
        return _mcnptools_wrap.vector_double_clear(self)

    def get_allocator(self):
        return _mcnptools_wrap.vector_double_get_allocator(self)

    def pop_back(self):
        return _mcnptools_wrap.vector_double_pop_back(self)

    def erase(self, *args):
        return _mcnptools_wrap.vector_double_erase(self, *args)

    def __init__(self, *args):
        _mcnptools_wrap.vector_double_swiginit(self, _mcnptools_wrap.new_vector_double(*args))

    def push_back(self, x):
        return _mcnptools_wrap.vector_double_push_back(self, x)

    def front(self):
        return _mcnptools_wrap.vector_double_front(self)

    def back(self):
        return _mcnptools_wrap.vector_double_back(self)

    def assign(self, n, x):
        return _mcnptools_wrap.vector_double_assign(self, n, x)

    def resize(self, *args):
        return _mcnptools_wrap.vector_double_resize(self, *args)

    def insert(self, *args):
        return _mcnptools_wrap.vector_double_insert(self, *args)

    def reserve(self, n):
        return _mcnptools_wrap.vector_double_reserve(self, n)

    def capacity(self):
        return _mcnptools_wrap.vector_double_capacity(self)
    __swig_destroy__ = _mcnptools_wrap.delete_vector_double

# Register vector_double in _mcnptools_wrap:
_mcnptools_wrap.vector_double_swigregister(vector_double)

class vector_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _mcnptools_wrap.vector_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mcnptools_wrap.vector_string___nonzero__(self)

    def __bool__(self):
        return _mcnptools_wrap.vector_string___bool__(self)

    def __len__(self):
        return _mcnptools_wrap.vector_string___len__(self)

    def __getslice__(self, i, j):
        return _mcnptools_wrap.vector_string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mcnptools_wrap.vector_string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mcnptools_wrap.vector_string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mcnptools_wrap.vector_string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mcnptools_wrap.vector_string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mcnptools_wrap.vector_string___setitem__(self, *args)

    def pop(self):
        return _mcnptools_wrap.vector_string_pop(self)

    def append(self, x):
        return _mcnptools_wrap.vector_string_append(self, x)

    def empty(self):
        return _mcnptools_wrap.vector_string_empty(self)

    def size(self):
        return _mcnptools_wrap.vector_string_size(self)

    def swap(self, v):
        return _mcnptools_wrap.vector_string_swap(self, v)

    def begin(self):
        return _mcnptools_wrap.vector_string_begin(self)

    def end(self):
        return _mcnptools_wrap.vector_string_end(self)

    def rbegin(self):
        return _mcnptools_wrap.vector_string_rbegin(self)

    def rend(self):
        return _mcnptools_wrap.vector_string_rend(self)

    def clear(self):
        return _mcnptools_wrap.vector_string_clear(self)

    def get_allocator(self):
        return _mcnptools_wrap.vector_string_get_allocator(self)

    def pop_back(self):
        return _mcnptools_wrap.vector_string_pop_back(self)

    def erase(self, *args):
        return _mcnptools_wrap.vector_string_erase(self, *args)

    def __init__(self, *args):
        _mcnptools_wrap.vector_string_swiginit(self, _mcnptools_wrap.new_vector_string(*args))

    def push_back(self, x):
        return _mcnptools_wrap.vector_string_push_back(self, x)

    def front(self):
        return _mcnptools_wrap.vector_string_front(self)

    def back(self):
        return _mcnptools_wrap.vector_string_back(self)

    def assign(self, n, x):
        return _mcnptools_wrap.vector_string_assign(self, n, x)

    def resize(self, *args):
        return _mcnptools_wrap.vector_string_resize(self, *args)

    def insert(self, *args):
        return _mcnptools_wrap.vector_string_insert(self, *args)

    def reserve(self, n):
        return _mcnptools_wrap.vector_string_reserve(self, n)

    def capacity(self):
        return _mcnptools_wrap.vector_string_capacity(self)
    __swig_destroy__ = _mcnptools_wrap.delete_vector_string

# Register vector_string in _mcnptools_wrap:
_mcnptools_wrap.vector_string_swigregister(vector_string)

class vector_PtracHistory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _mcnptools_wrap.vector_PtracHistory_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mcnptools_wrap.vector_PtracHistory___nonzero__(self)

    def __bool__(self):
        return _mcnptools_wrap.vector_PtracHistory___bool__(self)

    def __len__(self):
        return _mcnptools_wrap.vector_PtracHistory___len__(self)

    def __getslice__(self, i, j):
        return _mcnptools_wrap.vector_PtracHistory___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mcnptools_wrap.vector_PtracHistory___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mcnptools_wrap.vector_PtracHistory___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mcnptools_wrap.vector_PtracHistory___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mcnptools_wrap.vector_PtracHistory___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mcnptools_wrap.vector_PtracHistory___setitem__(self, *args)

    def pop(self):
        return _mcnptools_wrap.vector_PtracHistory_pop(self)

    def append(self, x):
        return _mcnptools_wrap.vector_PtracHistory_append(self, x)

    def empty(self):
        return _mcnptools_wrap.vector_PtracHistory_empty(self)

    def size(self):
        return _mcnptools_wrap.vector_PtracHistory_size(self)

    def swap(self, v):
        return _mcnptools_wrap.vector_PtracHistory_swap(self, v)

    def begin(self):
        return _mcnptools_wrap.vector_PtracHistory_begin(self)

    def end(self):
        return _mcnptools_wrap.vector_PtracHistory_end(self)

    def rbegin(self):
        return _mcnptools_wrap.vector_PtracHistory_rbegin(self)

    def rend(self):
        return _mcnptools_wrap.vector_PtracHistory_rend(self)

    def clear(self):
        return _mcnptools_wrap.vector_PtracHistory_clear(self)

    def get_allocator(self):
        return _mcnptools_wrap.vector_PtracHistory_get_allocator(self)

    def pop_back(self):
        return _mcnptools_wrap.vector_PtracHistory_pop_back(self)

    def erase(self, *args):
        return _mcnptools_wrap.vector_PtracHistory_erase(self, *args)

    def __init__(self, *args):
        _mcnptools_wrap.vector_PtracHistory_swiginit(self, _mcnptools_wrap.new_vector_PtracHistory(*args))

    def push_back(self, x):
        return _mcnptools_wrap.vector_PtracHistory_push_back(self, x)

    def front(self):
        return _mcnptools_wrap.vector_PtracHistory_front(self)

    def back(self):
        return _mcnptools_wrap.vector_PtracHistory_back(self)

    def assign(self, n, x):
        return _mcnptools_wrap.vector_PtracHistory_assign(self, n, x)

    def resize(self, *args):
        return _mcnptools_wrap.vector_PtracHistory_resize(self, *args)

    def insert(self, *args):
        return _mcnptools_wrap.vector_PtracHistory_insert(self, *args)

    def reserve(self, n):
        return _mcnptools_wrap.vector_PtracHistory_reserve(self, n)

    def capacity(self):
        return _mcnptools_wrap.vector_PtracHistory_capacity(self)
    __swig_destroy__ = _mcnptools_wrap.delete_vector_PtracHistory

# Register vector_PtracHistory in _mcnptools_wrap:
_mcnptools_wrap.vector_PtracHistory_swigregister(vector_PtracHistory)

class Lnk3Dnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mcnptools_wrap.Lnk3Dnt_swiginit(self, _mcnptools_wrap.new_Lnk3Dnt(*args))
    SLAB1D = _mcnptools_wrap.Lnk3Dnt_SLAB1D
    CYL1D = _mcnptools_wrap.Lnk3Dnt_CYL1D
    SPH1D = _mcnptools_wrap.Lnk3Dnt_SPH1D
    XY = _mcnptools_wrap.Lnk3Dnt_XY
    RZ = _mcnptools_wrap.Lnk3Dnt_RZ
    RT = _mcnptools_wrap.Lnk3Dnt_RT
    XYZ = _mcnptools_wrap.Lnk3Dnt_XYZ
    RZT = _mcnptools_wrap.Lnk3Dnt_RZT

    def GetName(self):
        return _mcnptools_wrap.Lnk3Dnt_GetName(self)

    def GetUser(self):
        return _mcnptools_wrap.Lnk3Dnt_GetUser(self)

    def GetVersion(self):
        return _mcnptools_wrap.Lnk3Dnt_GetVersion(self)

    def GetDblparam(self):
        return _mcnptools_wrap.Lnk3Dnt_GetDblparam(self)

    def GetGeom(self):
        return _mcnptools_wrap.Lnk3Dnt_GetGeom(self)

    def GetNZone(self):
        return _mcnptools_wrap.Lnk3Dnt_GetNZone(self)

    def GetICoarse(self):
        return _mcnptools_wrap.Lnk3Dnt_GetICoarse(self)

    def GetJCoarse(self):
        return _mcnptools_wrap.Lnk3Dnt_GetJCoarse(self)

    def GetKCoarse(self):
        return _mcnptools_wrap.Lnk3Dnt_GetKCoarse(self)

    def GetIFine(self):
        return _mcnptools_wrap.Lnk3Dnt_GetIFine(self)

    def GetJFine(self):
        return _mcnptools_wrap.Lnk3Dnt_GetJFine(self)

    def GetKFine(self):
        return _mcnptools_wrap.Lnk3Dnt_GetKFine(self)

    def GetNMXSP(self):
        return _mcnptools_wrap.Lnk3Dnt_GetNMXSP(self)

    def SetName(self, name):
        return _mcnptools_wrap.Lnk3Dnt_SetName(self, name)

    def SetUser(self, user):
        return _mcnptools_wrap.Lnk3Dnt_SetUser(self, user)

    def SetVersion(self, version):
        return _mcnptools_wrap.Lnk3Dnt_SetVersion(self, version)

    def GetMaterials(self, *args):
        return _mcnptools_wrap.Lnk3Dnt_GetMaterials(self, *args)

    def GetDensities(self, *args):
        return _mcnptools_wrap.Lnk3Dnt_GetDensities(self, *args)

    def GetMaterialIds(self):
        return _mcnptools_wrap.Lnk3Dnt_GetMaterialIds(self)

    def SetMaterials(self, materials, i, j=0, k=0):
        return _mcnptools_wrap.Lnk3Dnt_SetMaterials(self, materials, i, j, k)

    def SetDensities(self, densities, i, j=0, k=0):
        return _mcnptools_wrap.Lnk3Dnt_SetDensities(self, densities, i, j, k)

    def Scale(self, arg2):
        return _mcnptools_wrap.Lnk3Dnt_Scale(self, arg2)

    def Coarsen(self, ifact=1, jfact=1, kfact=1, nmxsp=0, void_0_1=True):
        return _mcnptools_wrap.Lnk3Dnt_Coarsen(self, ifact, jfact, kfact, nmxsp, void_0_1)

    def GetIMesh(self):
        return _mcnptools_wrap.Lnk3Dnt_GetIMesh(self)

    def GetJMesh(self):
        return _mcnptools_wrap.Lnk3Dnt_GetJMesh(self)

    def GetKMesh(self):
        return _mcnptools_wrap.Lnk3Dnt_GetKMesh(self)

    def SetIMesh(self, imesh):
        return _mcnptools_wrap.Lnk3Dnt_SetIMesh(self, imesh)

    def SetJMesh(self, jmesh):
        return _mcnptools_wrap.Lnk3Dnt_SetJMesh(self, jmesh)

    def SetKMesh(self, kmesh):
        return _mcnptools_wrap.Lnk3Dnt_SetKMesh(self, kmesh)

    def ReadMaterials(self):
        return _mcnptools_wrap.Lnk3Dnt_ReadMaterials(self)

    def Save(self, savename):
        return _mcnptools_wrap.Lnk3Dnt_Save(self, savename)

    def Load(self, filename):
        return _mcnptools_wrap.Lnk3Dnt_Load(self, filename)
    __swig_destroy__ = _mcnptools_wrap.delete_Lnk3Dnt

# Register Lnk3Dnt in _mcnptools_wrap:
_mcnptools_wrap.Lnk3Dnt_swigregister(Lnk3Dnt)


def l3dinfo(files, full=False):
    return _mcnptools_wrap.l3dinfo(files, full)
MCNPTOOLS_MCTALKCODE_HPP = _mcnptools_wrap.MCNPTOOLS_MCTALKCODE_HPP
class MctalKcode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    COLLSION_KEFF = _mcnptools_wrap.MctalKcode_COLLSION_KEFF
    ABSORPTION_KEFF = _mcnptools_wrap.MctalKcode_ABSORPTION_KEFF
    TRACKLENGTH_KEFF = _mcnptools_wrap.MctalKcode_TRACKLENGTH_KEFF
    COLLISION_PRLT = _mcnptools_wrap.MctalKcode_COLLISION_PRLT
    ABSORPTION_PRLT = _mcnptools_wrap.MctalKcode_ABSORPTION_PRLT
    AVG_COLLSION_KEFF = _mcnptools_wrap.MctalKcode_AVG_COLLSION_KEFF
    AVG_COLLSION_KEFF_STD = _mcnptools_wrap.MctalKcode_AVG_COLLSION_KEFF_STD
    AVG_ABSORPTION_KEFF = _mcnptools_wrap.MctalKcode_AVG_ABSORPTION_KEFF
    AVG_ABSORPTION_KEFF_STD = _mcnptools_wrap.MctalKcode_AVG_ABSORPTION_KEFF_STD
    AVG_TRACKLENGTH_KEFF = _mcnptools_wrap.MctalKcode_AVG_TRACKLENGTH_KEFF
    AVG_TRACKLENGTH_KEFF_STD = _mcnptools_wrap.MctalKcode_AVG_TRACKLENGTH_KEFF_STD
    AVG_COMBINED_KEFF = _mcnptools_wrap.MctalKcode_AVG_COMBINED_KEFF
    AVG_COMBINED_KEFF_STD = _mcnptools_wrap.MctalKcode_AVG_COMBINED_KEFF_STD
    AVG_COMBINED_KEFF_BCS = _mcnptools_wrap.MctalKcode_AVG_COMBINED_KEFF_BCS
    AVG_COMBINED_KEFF_BCS_STD = _mcnptools_wrap.MctalKcode_AVG_COMBINED_KEFF_BCS_STD
    COMBINED_PRLT = _mcnptools_wrap.MctalKcode_COMBINED_PRLT
    COMBINED_PRLT_STD = _mcnptools_wrap.MctalKcode_COMBINED_PRLT_STD
    CYCLE_NPS = _mcnptools_wrap.MctalKcode_CYCLE_NPS
    AVG_COMBINED_FOM = _mcnptools_wrap.MctalKcode_AVG_COMBINED_FOM

    def __init__(self):
        _mcnptools_wrap.MctalKcode_swiginit(self, _mcnptools_wrap.new_MctalKcode())

    def GetValue(self, value=-1, cycle=-1):
        return _mcnptools_wrap.MctalKcode_GetValue(self, value, cycle)

    def GetCycles(self):
        return _mcnptools_wrap.MctalKcode_GetCycles(self)

    def GetSettle(self):
        return _mcnptools_wrap.MctalKcode_GetSettle(self)

    def GetNdat(self):
        return _mcnptools_wrap.MctalKcode_GetNdat(self)

    def __iand__(self, arg2):
        return _mcnptools_wrap.MctalKcode___iand__(self, arg2)

    def SummaryString(self):
        return _mcnptools_wrap.MctalKcode_SummaryString(self)

    def WriteToMctal(self, os):
        return _mcnptools_wrap.MctalKcode_WriteToMctal(self, os)
    __swig_destroy__ = _mcnptools_wrap.delete_MctalKcode

# Register MctalKcode in _mcnptools_wrap:
_mcnptools_wrap.MctalKcode_swigregister(MctalKcode)


def mergeMctalKcodes(arg1, arg2):
    return _mcnptools_wrap.mergeMctalKcodes(arg1, arg2)
MCNPTOOLS_MCTALTALLY_HPP = _mcnptools_wrap.MCNPTOOLS_MCTALTALLY_HPP
class MctalTally(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TFC = _mcnptools_wrap.MctalTally_TFC
    TFC_NPS = _mcnptools_wrap.MctalTally_TFC_NPS
    TFC_VALUE = _mcnptools_wrap.MctalTally_TFC_VALUE
    TFC_ERROR = _mcnptools_wrap.MctalTally_TFC_ERROR
    TFC_FOM = _mcnptools_wrap.MctalTally_TFC_FOM
    MctalTallyBins_F = _mcnptools_wrap.MctalTally_MctalTallyBins_F
    MctalTallyBins_D = _mcnptools_wrap.MctalTally_MctalTallyBins_D
    MctalTallyBins_U = _mcnptools_wrap.MctalTally_MctalTallyBins_U
    MctalTallyBins_S = _mcnptools_wrap.MctalTally_MctalTallyBins_S
    MctalTallyBins_M = _mcnptools_wrap.MctalTally_MctalTallyBins_M
    MctalTallyBins_C = _mcnptools_wrap.MctalTally_MctalTallyBins_C
    MctalTallyBins_E = _mcnptools_wrap.MctalTally_MctalTallyBins_E
    MctalTallyBins_T = _mcnptools_wrap.MctalTally_MctalTallyBins_T

    def __init__(self):
        _mcnptools_wrap.MctalTally_swiginit(self, _mcnptools_wrap.new_MctalTally())

    def ID(self):
        return _mcnptools_wrap.MctalTally_ID(self)

    def GetNextEventEstimatorType(self):
        return _mcnptools_wrap.MctalTally_GetNextEventEstimatorType(self)

    def GetTFCBins(self, pert=0):
        return _mcnptools_wrap.MctalTally_GetTFCBins(self, pert)

    def GetTFCSize(self, pert=0):
        return _mcnptools_wrap.MctalTally_GetTFCSize(self, pert)

    def GetTFCValue(self, tfc_value, tfc_entry=-1, pert=0):
        return _mcnptools_wrap.MctalTally_GetTFCValue(self, tfc_value, tfc_entry, pert)

    def GetValue(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, pert=0):
        return _mcnptools_wrap.MctalTally_GetValue(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, pert)

    def GetError(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, pert=0):
        return _mcnptools_wrap.MctalTally_GetError(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, pert)

    def GetValues(self, T, b1, b2, b3, b4, b5, b6, b7, pert=0):
        return _mcnptools_wrap.MctalTally_GetValues(self, T, b1, b2, b3, b4, b5, b6, b7, pert)

    def GetErrors(self, T, b1, b2, b3, b4, b5, b6, b7, pert=0):
        return _mcnptools_wrap.MctalTally_GetErrors(self, T, b1, b2, b3, b4, b5, b6, b7, pert)

    def GetFBins(self):
        return _mcnptools_wrap.MctalTally_GetFBins(self)

    def GetDBins(self):
        return _mcnptools_wrap.MctalTally_GetDBins(self)

    def GetUBins(self):
        return _mcnptools_wrap.MctalTally_GetUBins(self)

    def GetSBins(self):
        return _mcnptools_wrap.MctalTally_GetSBins(self)

    def GetMBins(self):
        return _mcnptools_wrap.MctalTally_GetMBins(self)

    def GetEBins(self):
        return _mcnptools_wrap.MctalTally_GetEBins(self)

    def GetCBins(self):
        return _mcnptools_wrap.MctalTally_GetCBins(self)

    def GetTBins(self):
        return _mcnptools_wrap.MctalTally_GetTBins(self)

    def __iand__(self, arg2):
        return _mcnptools_wrap.MctalTally___iand__(self, arg2)

    def SummaryString(self):
        return _mcnptools_wrap.MctalTally_SummaryString(self)

    def WriteToMctal(self, *args):
        return _mcnptools_wrap.MctalTally_WriteToMctal(self, *args)
    __swig_destroy__ = _mcnptools_wrap.delete_MctalTally

# Register MctalTally in _mcnptools_wrap:
_mcnptools_wrap.MctalTally_swigregister(MctalTally)


def mergeMctalTallies(arg1, arg2):
    return _mcnptools_wrap.mergeMctalTallies(arg1, arg2)
MCNPTOOLS_MCTAL_HPP = _mcnptools_wrap.MCNPTOOLS_MCTAL_HPP
class Mctal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mcnptools_wrap.Mctal_swiginit(self, _mcnptools_wrap.new_Mctal(*args))

    def GetTallyList(self):
        return _mcnptools_wrap.Mctal_GetTallyList(self)

    def GetCode(self):
        return _mcnptools_wrap.Mctal_GetCode(self)

    def GetVersion(self):
        return _mcnptools_wrap.Mctal_GetVersion(self)

    def GetProbid(self):
        return _mcnptools_wrap.Mctal_GetProbid(self)

    def GetDump(self):
        return _mcnptools_wrap.Mctal_GetDump(self)

    def GetNps(self):
        return _mcnptools_wrap.Mctal_GetNps(self)

    def GetRandoms(self):
        return _mcnptools_wrap.Mctal_GetRandoms(self)

    def GetComment(self):
        return _mcnptools_wrap.Mctal_GetComment(self)

    def GetTally(self, arg2):
        return _mcnptools_wrap.Mctal_GetTally(self, arg2)

    def GetKcode(self):
        return _mcnptools_wrap.Mctal_GetKcode(self)

    def SummaryString(self):
        return _mcnptools_wrap.Mctal_SummaryString(self)

    def WriteHeader(self, *args):
        return _mcnptools_wrap.Mctal_WriteHeader(self, *args)

    def IsolateTally(self, tally, filename):
        return _mcnptools_wrap.Mctal_IsolateTally(self, tally, filename)
    __swig_destroy__ = _mcnptools_wrap.delete_Mctal

# Register Mctal in _mcnptools_wrap:
_mcnptools_wrap.Mctal_swigregister(Mctal)

MCNPTOOLS_MESHTALTALLY_HPP = _mcnptools_wrap.MCNPTOOLS_MESHTALTALLY_HPP
class MeshtalTally(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    XYZ = _mcnptools_wrap.MeshtalTally_XYZ
    RZT = _mcnptools_wrap.MeshtalTally_RZT

    def __init__(self):
        _mcnptools_wrap.MeshtalTally_swiginit(self, _mcnptools_wrap.new_MeshtalTally())

    def ID(self):
        return _mcnptools_wrap.MeshtalTally_ID(self)

    def GetXRBounds(self):
        return _mcnptools_wrap.MeshtalTally_GetXRBounds(self)

    def GetYZBounds(self):
        return _mcnptools_wrap.MeshtalTally_GetYZBounds(self)

    def GetZTBounds(self):
        return _mcnptools_wrap.MeshtalTally_GetZTBounds(self)

    def GetEBounds(self):
        return _mcnptools_wrap.MeshtalTally_GetEBounds(self)

    def GetTBounds(self):
        return _mcnptools_wrap.MeshtalTally_GetTBounds(self)

    def GetXRBins(self):
        return _mcnptools_wrap.MeshtalTally_GetXRBins(self)

    def GetYZBins(self):
        return _mcnptools_wrap.MeshtalTally_GetYZBins(self)

    def GetZTBins(self):
        return _mcnptools_wrap.MeshtalTally_GetZTBins(self)

    def GetEBins(self):
        return _mcnptools_wrap.MeshtalTally_GetEBins(self)

    def GetTBins(self):
        return _mcnptools_wrap.MeshtalTally_GetTBins(self)

    def GetType(self):
        return _mcnptools_wrap.MeshtalTally_GetType(self)

    def GetValue(self, arg2, arg3, arg4, e=-1, t=-1):
        return _mcnptools_wrap.MeshtalTally_GetValue(self, arg2, arg3, arg4, e, t)

    def GetError(self, arg2, arg3, arg4, e=-1, t=-1):
        return _mcnptools_wrap.MeshtalTally_GetError(self, arg2, arg3, arg4, e, t)

    def GetVolume(self, arg2, arg3, arg4):
        return _mcnptools_wrap.MeshtalTally_GetVolume(self, arg2, arg3, arg4)

    def __iand__(self, arg2):
        return _mcnptools_wrap.MeshtalTally___iand__(self, arg2)

    def SummaryString(self):
        return _mcnptools_wrap.MeshtalTally_SummaryString(self)

    def WriteToMeshtal(self, *args):
        return _mcnptools_wrap.MeshtalTally_WriteToMeshtal(self, *args)
    __swig_destroy__ = _mcnptools_wrap.delete_MeshtalTally

# Register MeshtalTally in _mcnptools_wrap:
_mcnptools_wrap.MeshtalTally_swigregister(MeshtalTally)


def __and__(*args):
    return _mcnptools_wrap.__and__(*args)

def mergeMeshtalTallies(arg1, arg2):
    return _mcnptools_wrap.mergeMeshtalTallies(arg1, arg2)
MCNPTOOLS_MESHTAL_HPP = _mcnptools_wrap.MCNPTOOLS_MESHTAL_HPP
class Meshtal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mcnptools_wrap.Meshtal_swiginit(self, _mcnptools_wrap.new_Meshtal(*args))

    def GetTallyList(self):
        return _mcnptools_wrap.Meshtal_GetTallyList(self)

    def GetCode(self):
        return _mcnptools_wrap.Meshtal_GetCode(self)

    def GetVersion(self):
        return _mcnptools_wrap.Meshtal_GetVersion(self)

    def GetProbid(self):
        return _mcnptools_wrap.Meshtal_GetProbid(self)

    def GetComment(self):
        return _mcnptools_wrap.Meshtal_GetComment(self)

    def GetNps(self):
        return _mcnptools_wrap.Meshtal_GetNps(self)

    def GetTally(self, arg2):
        return _mcnptools_wrap.Meshtal_GetTally(self, arg2)

    def SummaryString(self):
        return _mcnptools_wrap.Meshtal_SummaryString(self)

    def WriteHeader(self, *args):
        return _mcnptools_wrap.Meshtal_WriteHeader(self, *args)
    __swig_destroy__ = _mcnptools_wrap.delete_Meshtal

# Register Meshtal in _mcnptools_wrap:
_mcnptools_wrap.Meshtal_swigregister(Meshtal)

class PtracEnums(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BIN_PTRAC = _mcnptools_wrap.PtracEnums_BIN_PTRAC
    ASC_PTRAC = _mcnptools_wrap.PtracEnums_ASC_PTRAC
    HDF5_PTRAC = _mcnptools_wrap.PtracEnums_HDF5_PTRAC
    SRC = _mcnptools_wrap.PtracEnums_SRC
    BNK = _mcnptools_wrap.PtracEnums_BNK
    SUR = _mcnptools_wrap.PtracEnums_SUR
    COL = _mcnptools_wrap.PtracEnums_COL
    TER = _mcnptools_wrap.PtracEnums_TER
    LST = _mcnptools_wrap.PtracEnums_LST
    BNK_DXT_TRACK = _mcnptools_wrap.PtracEnums_BNK_DXT_TRACK
    BNK_ERG_TME_SPLIT = _mcnptools_wrap.PtracEnums_BNK_ERG_TME_SPLIT
    BNK_WWS_SPLIT = _mcnptools_wrap.PtracEnums_BNK_WWS_SPLIT
    BNK_WWC_SPLIT = _mcnptools_wrap.PtracEnums_BNK_WWC_SPLIT
    BNK_UNC_TRACK = _mcnptools_wrap.PtracEnums_BNK_UNC_TRACK
    BNK_IMP_SPLIT = _mcnptools_wrap.PtracEnums_BNK_IMP_SPLIT
    BNK_N_XN_F = _mcnptools_wrap.PtracEnums_BNK_N_XN_F
    BNK_N_XG = _mcnptools_wrap.PtracEnums_BNK_N_XG
    BNK_FLUORESCENCE = _mcnptools_wrap.PtracEnums_BNK_FLUORESCENCE
    BNK_ANNIHILATION = _mcnptools_wrap.PtracEnums_BNK_ANNIHILATION
    BNK_PHOTO_ELECTRON = _mcnptools_wrap.PtracEnums_BNK_PHOTO_ELECTRON
    BNK_COMPT_ELECTRON = _mcnptools_wrap.PtracEnums_BNK_COMPT_ELECTRON
    BNK_PAIR_ELECTRON = _mcnptools_wrap.PtracEnums_BNK_PAIR_ELECTRON
    BNK_AUGER_ELECTRON = _mcnptools_wrap.PtracEnums_BNK_AUGER_ELECTRON
    BNK_PAIR_POSITRON = _mcnptools_wrap.PtracEnums_BNK_PAIR_POSITRON
    BNK_BREMSSTRAHLUNG = _mcnptools_wrap.PtracEnums_BNK_BREMSSTRAHLUNG
    BNK_KNOCK_ON = _mcnptools_wrap.PtracEnums_BNK_KNOCK_ON
    BNK_K_X_RAY = _mcnptools_wrap.PtracEnums_BNK_K_X_RAY
    BNK_N_XG_MG = _mcnptools_wrap.PtracEnums_BNK_N_XG_MG
    BNK_N_XF_MG = _mcnptools_wrap.PtracEnums_BNK_N_XF_MG
    BNK_N_XN_MG = _mcnptools_wrap.PtracEnums_BNK_N_XN_MG
    BNK_G_XG_MG = _mcnptools_wrap.PtracEnums_BNK_G_XG_MG
    BNK_ADJ_SPLIT = _mcnptools_wrap.PtracEnums_BNK_ADJ_SPLIT
    BNK_WWT_SPLIT = _mcnptools_wrap.PtracEnums_BNK_WWT_SPLIT
    BNK_PHOTONUCLEAR = _mcnptools_wrap.PtracEnums_BNK_PHOTONUCLEAR
    BNK_DECAY = _mcnptools_wrap.PtracEnums_BNK_DECAY
    BNK_NUCLEAR_INT = _mcnptools_wrap.PtracEnums_BNK_NUCLEAR_INT
    BNK_RECOIL = _mcnptools_wrap.PtracEnums_BNK_RECOIL
    BNK_DXTRAN_ANNIHIL = _mcnptools_wrap.PtracEnums_BNK_DXTRAN_ANNIHIL
    BNK_N_CHARGED_PART = _mcnptools_wrap.PtracEnums_BNK_N_CHARGED_PART
    BNK_H_CHARGED_PART = _mcnptools_wrap.PtracEnums_BNK_H_CHARGED_PART
    BNK_N_TO_TABULAR = _mcnptools_wrap.PtracEnums_BNK_N_TO_TABULAR
    BNK_MODEL_UPDAT1 = _mcnptools_wrap.PtracEnums_BNK_MODEL_UPDAT1
    BNK_MODEL_UPDATE = _mcnptools_wrap.PtracEnums_BNK_MODEL_UPDATE
    BNK_DELAYED_NEUTRON = _mcnptools_wrap.PtracEnums_BNK_DELAYED_NEUTRON
    BNK_DELAYED_PHOTON = _mcnptools_wrap.PtracEnums_BNK_DELAYED_PHOTON
    BNK_DELAYED_BETA = _mcnptools_wrap.PtracEnums_BNK_DELAYED_BETA
    BNK_DELAYED_ALPHA = _mcnptools_wrap.PtracEnums_BNK_DELAYED_ALPHA
    BNK_DELAYED_POSITRN = _mcnptools_wrap.PtracEnums_BNK_DELAYED_POSITRN
    TER_ESCAPE = _mcnptools_wrap.PtracEnums_TER_ESCAPE
    TER_ENERGY_CUTOFF = _mcnptools_wrap.PtracEnums_TER_ENERGY_CUTOFF
    TER_TIME_CUTOFF = _mcnptools_wrap.PtracEnums_TER_TIME_CUTOFF
    TER_WEIGHT_WINDOW = _mcnptools_wrap.PtracEnums_TER_WEIGHT_WINDOW
    TER_CELL_IMPORTANCE = _mcnptools_wrap.PtracEnums_TER_CELL_IMPORTANCE
    TER_WEIGHT_CUTOFF = _mcnptools_wrap.PtracEnums_TER_WEIGHT_CUTOFF
    TER_ENERGY_IMPORTANCE = _mcnptools_wrap.PtracEnums_TER_ENERGY_IMPORTANCE
    TER_DXTRAN = _mcnptools_wrap.PtracEnums_TER_DXTRAN
    TER_FORCED_COLLISION = _mcnptools_wrap.PtracEnums_TER_FORCED_COLLISION
    TER_EXPONENTIAL_TRANSFORM = _mcnptools_wrap.PtracEnums_TER_EXPONENTIAL_TRANSFORM
    TER_N_DOWNSCATTERING = _mcnptools_wrap.PtracEnums_TER_N_DOWNSCATTERING
    TER_N_CAPTURE = _mcnptools_wrap.PtracEnums_TER_N_CAPTURE
    TER_N_N_XN = _mcnptools_wrap.PtracEnums_TER_N_N_XN
    TER_N_FISSION = _mcnptools_wrap.PtracEnums_TER_N_FISSION
    TER_N_NUCLEAR_INTERACTION = _mcnptools_wrap.PtracEnums_TER_N_NUCLEAR_INTERACTION
    TER_N_PARTICLE_DECAY = _mcnptools_wrap.PtracEnums_TER_N_PARTICLE_DECAY
    TER_N_TABULAR_BOUNDARY = _mcnptools_wrap.PtracEnums_TER_N_TABULAR_BOUNDARY
    TER_P_COMPTON_SCATTER = _mcnptools_wrap.PtracEnums_TER_P_COMPTON_SCATTER
    TER_P_CAPTURE = _mcnptools_wrap.PtracEnums_TER_P_CAPTURE
    TER_P_PAIR_PRODUCTION = _mcnptools_wrap.PtracEnums_TER_P_PAIR_PRODUCTION
    TER_P_PHOTONUCLEAR = _mcnptools_wrap.PtracEnums_TER_P_PHOTONUCLEAR
    TER_E_SCATTER = _mcnptools_wrap.PtracEnums_TER_E_SCATTER
    TER_E_BREMSSTRAHLUNG = _mcnptools_wrap.PtracEnums_TER_E_BREMSSTRAHLUNG
    TER_E_INTERACTION_DECAY = _mcnptools_wrap.PtracEnums_TER_E_INTERACTION_DECAY
    TER_GENNEUT_NUCLEAR_INTERACTION = _mcnptools_wrap.PtracEnums_TER_GENNEUT_NUCLEAR_INTERACTION
    TER_GENNEUT_ELASTIC_SCATTER = _mcnptools_wrap.PtracEnums_TER_GENNEUT_ELASTIC_SCATTER
    TER_GENNEUT_DECAY = _mcnptools_wrap.PtracEnums_TER_GENNEUT_DECAY
    TER_GENCHAR_MULTIPLE_SCATTER = _mcnptools_wrap.PtracEnums_TER_GENCHAR_MULTIPLE_SCATTER
    TER_GENCHAR_BREMSSTRAHLUNG = _mcnptools_wrap.PtracEnums_TER_GENCHAR_BREMSSTRAHLUNG
    TER_GENCHAR_NUCLEAR_INTERACTION = _mcnptools_wrap.PtracEnums_TER_GENCHAR_NUCLEAR_INTERACTION
    TER_GENCHAR_ELASTIC_SCATTER = _mcnptools_wrap.PtracEnums_TER_GENCHAR_ELASTIC_SCATTER
    TER_GENCHAR_DECAY = _mcnptools_wrap.PtracEnums_TER_GENCHAR_DECAY
    TER_GENCHAR_CAPTURE = _mcnptools_wrap.PtracEnums_TER_GENCHAR_CAPTURE
    TER_GENCHAR_TABULAR_SAMPLING = _mcnptools_wrap.PtracEnums_TER_GENCHAR_TABULAR_SAMPLING
    NPS = _mcnptools_wrap.PtracEnums_NPS
    FIRST_EVENT_TYPE = _mcnptools_wrap.PtracEnums_FIRST_EVENT_TYPE
    NPSCELL = _mcnptools_wrap.PtracEnums_NPSCELL
    NPSSURFACE = _mcnptools_wrap.PtracEnums_NPSSURFACE
    TALLY = _mcnptools_wrap.PtracEnums_TALLY
    VALUE = _mcnptools_wrap.PtracEnums_VALUE
    NEXT_EVENT_TYPE = _mcnptools_wrap.PtracEnums_NEXT_EVENT_TYPE
    NODE = _mcnptools_wrap.PtracEnums_NODE
    NSR = _mcnptools_wrap.PtracEnums_NSR
    ZAID = _mcnptools_wrap.PtracEnums_ZAID
    RXN = _mcnptools_wrap.PtracEnums_RXN
    SURFACE = _mcnptools_wrap.PtracEnums_SURFACE
    ANGLE = _mcnptools_wrap.PtracEnums_ANGLE
    TERMINATION_TYPE = _mcnptools_wrap.PtracEnums_TERMINATION_TYPE
    BRANCH = _mcnptools_wrap.PtracEnums_BRANCH
    PARTICLE = _mcnptools_wrap.PtracEnums_PARTICLE
    CELL = _mcnptools_wrap.PtracEnums_CELL
    MATERIAL = _mcnptools_wrap.PtracEnums_MATERIAL
    COLLISION_NUMBER = _mcnptools_wrap.PtracEnums_COLLISION_NUMBER
    X = _mcnptools_wrap.PtracEnums_X
    Y = _mcnptools_wrap.PtracEnums_Y
    Z = _mcnptools_wrap.PtracEnums_Z
    U = _mcnptools_wrap.PtracEnums_U
    V = _mcnptools_wrap.PtracEnums_V
    W = _mcnptools_wrap.PtracEnums_W
    ENERGY = _mcnptools_wrap.PtracEnums_ENERGY
    WEIGHT = _mcnptools_wrap.PtracEnums_WEIGHT
    TIME = _mcnptools_wrap.PtracEnums_TIME
    SOURCE_TYPE = _mcnptools_wrap.PtracEnums_SOURCE_TYPE
    BANK_TYPE = _mcnptools_wrap.PtracEnums_BANK_TYPE

    def __init__(self):
        _mcnptools_wrap.PtracEnums_swiginit(self, _mcnptools_wrap.new_PtracEnums())
    __swig_destroy__ = _mcnptools_wrap.delete_PtracEnums

# Register PtracEnums in _mcnptools_wrap:
_mcnptools_wrap.PtracEnums_swigregister(PtracEnums)

class PtracNps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mcnptools_wrap.PtracNps_swiginit(self, _mcnptools_wrap.new_PtracNps(*args))

    def NPS(self):
        return _mcnptools_wrap.PtracNps_NPS(self)

    def Cell(self):
        return _mcnptools_wrap.PtracNps_Cell(self)

    def Surface(self):
        return _mcnptools_wrap.PtracNps_Surface(self)

    def Tally(self):
        return _mcnptools_wrap.PtracNps_Tally(self)

    def Value(self):
        return _mcnptools_wrap.PtracNps_Value(self)
    __swig_destroy__ = _mcnptools_wrap.delete_PtracNps

# Register PtracNps in _mcnptools_wrap:
_mcnptools_wrap.PtracNps_swigregister(PtracNps)

class PtracEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mcnptools_wrap.PtracEvent_swiginit(self, _mcnptools_wrap.new_PtracEvent(*args))

    def Type(self):
        return _mcnptools_wrap.PtracEvent_Type(self)

    def BankType(self):
        return _mcnptools_wrap.PtracEvent_BankType(self)

    def Has(self, d):
        return _mcnptools_wrap.PtracEvent_Has(self, d)

    def Get(self, d):
        return _mcnptools_wrap.PtracEvent_Get(self, d)
    __swig_destroy__ = _mcnptools_wrap.delete_PtracEvent

# Register PtracEvent in _mcnptools_wrap:
_mcnptools_wrap.PtracEvent_swigregister(PtracEvent)

class PtracHistory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mcnptools_wrap.PtracHistory_swiginit(self, _mcnptools_wrap.new_PtracHistory(*args))

    def GetNPS(self):
        return _mcnptools_wrap.PtracHistory_GetNPS(self)

    def GetNumEvents(self):
        return _mcnptools_wrap.PtracHistory_GetNumEvents(self)

    def GetEvent(self, i):
        return _mcnptools_wrap.PtracHistory_GetEvent(self, i)
    __swig_destroy__ = _mcnptools_wrap.delete_PtracHistory

# Register PtracHistory in _mcnptools_wrap:
_mcnptools_wrap.PtracHistory_swigregister(PtracHistory)

class Ptrac(PtracEnums):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mcnptools_wrap.Ptrac_swiginit(self, _mcnptools_wrap.new_Ptrac(*args))

    def ReadHistories(self, num):
        return _mcnptools_wrap.Ptrac_ReadHistories(self, num)
    __swig_destroy__ = _mcnptools_wrap.delete_Ptrac

# Register Ptrac in _mcnptools_wrap:
_mcnptools_wrap.Ptrac_swigregister(Ptrac)

MCNPTOOLS_XSDIR_HPP = _mcnptools_wrap.MCNPTOOLS_XSDIR_HPP
class XSDir(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mcnptools_wrap.XSDir_swiginit(self, _mcnptools_wrap.new_XSDir(*args))

    def Has(self, *args):
        return _mcnptools_wrap.XSDir_Has(self, *args)
    __swig_destroy__ = _mcnptools_wrap.delete_XSDir

# Register XSDir in _mcnptools_wrap:
_mcnptools_wrap.XSDir_swigregister(XSDir)

MCNPTOOLS_MERGEMCTALS_HPP = _mcnptools_wrap.MCNPTOOLS_MERGEMCTALS_HPP

def mergeMctals(name, mctals, verbosity=0):
    return _mcnptools_wrap.mergeMctals(name, mctals, verbosity)

def mergeMeshtals(name, meshtals, verbosity=0):
    return _mcnptools_wrap.mergeMeshtals(name, meshtals, verbosity)


